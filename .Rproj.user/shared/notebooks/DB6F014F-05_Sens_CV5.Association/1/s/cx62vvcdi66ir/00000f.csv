"0","scale.linear.binary.md2 <- function(dt.all, fold.num){"
"0","  out.list.binary = c('Hypertension','Stroke','FALL',"
"0","                      'HF', 'MI', 'Diabetes')"
"0",""
"0","  binary_model_list <- list()"
"0","  binary.result = list()"
"0","  "
"0","  dt.all[,2:6] = scale(dt.all[,2:6])"
"0","  "
"0","  for (out in out.list.binary){"
"0","    column_names = c('OR', 'SE', 'T_value', 'P_value', 'Lower', 'Upper')"
"0","    matrix = matrix(NA * length(var_list)*length(column_names), "
"0","                    nrow = length(var_list), "
"0","                    ncol = length(column_names))"
"0","    df <- data.frame(matrix)"
"0","    colnames(df) <- column_names"
"0","    rownames(df) <- var_list"
"0","    "
"0","    for (step_var in var_list){"
"0","      comb = paste0(c(out, '&', step_var), collapse = '')"
"0","      formula.tmp = as.formula(paste0(out,'~',step_var,'+',"
"0","                                    paste0(c(cov_all[c(cov_demo, cov_life_gen)]), # , cov_life_gen"
"0","                                         collapse = '+')))"
"0","      binary_model_list[[comb]] = glm(formula.tmp, dt.all, family = binomial)"
"0","      result.tmp = data.frame(summary(binary_model_list[[comb]])$coefficients)"
"0","      result.tmp$Lower = confint(binary_model_list[[comb]])[,1]"
"0","      result.tmp$Upper = confint(binary_model_list[[comb]])[,2]"
"0","      result.tmp$Estimate = exp(result.tmp$Estimate)"
"0","      result.tmp$Lower = exp(result.tmp$Lower)"
"0","      result.tmp$Upper = exp(result.tmp$Upper)"
"0","      "
"0","      df[step_var,] = result.tmp[2,]"
"0","    }"
"0","    binary.result[[out]] = df"
"0","  }"
"0","  "
"0","  ## Visulization"
"0","  combined_dt <- do.call(rbind, binary.result)"
"0","  combined_dt$Label = row.names(combined_dt)"
"0","  "
"0","  combined_dt = combined_dt %>%"
"0","    separate(Label, into = c(""outcome"", ""algorithm""), sep = ""\\."", remove = FALSE)"
"0","  "
"0","  unique(combined_dt$outcome)"
"0","  label_names <- c('Hypertension', 'Stroke', 'Fall', 'HF', 'MI', 'Diabetes')"
"0","  "
"0","  combined_dt = combined_dt |>"
"0","    mutate(algorithm = case_when("
"0","      algorithm == 'adept' ~ 'ADEPT',"
"0","      algorithm == 'oak' ~ 'OAK',"
"0","      algorithm == 'sdt' ~ 'SDT',"
"0","      algorithm == 'stepcount_ssl' ~ 'Stepcount',"
"0","      algorithm == 'vs' ~ 'Verisence'"
"0","    ))"
"0","  p <- ggplot(combined_dt, aes(x = outcome, y = OR, color = algorithm, group = algorithm)) +"
"0","      geom_point(position = position_dodge(0.5)) +"
"0","      geom_errorbar(aes(ymin = Lower, ymax = Upper), "
"0","                    size = 0.7,width = 0.5, position = position_dodge(0.5)) +"
"0","      geom_hline(yintercept = 1, linetype = ""solid"") +"
"0","      labs(y = ""OR (After Scaled)"", "
"0","           x = ""Health Statues"", "
"0","           color = ""Models"") +"
"0","      theme_minimal() + "
"0","      theme("
"0","        panel.background = element_blank(),"
"0","        axis.ticks = element_blank(),"
"0","        axis.text = element_text(size = 12),"
"0","        axis.title = element_text(size = 14, face = ""bold""),"
"0","        axis.line = element_line(size = 0.5),"
"0","        plot.title = element_text(size = 14, face = ""bold"", hjust = 0.5),"
"0","        legend.text = element_text(size = 13),  # 图例标签的字体更大加粗"
"0","        legend.title = element_text(size = 14, face = ""bold""),"
"0","        "
"0","        legend.position = ""top"",  # 图例放置在底部"
"0","        legend.direction = ""horizontal"",  # 图例水平显示"
"0","        legend.box = ""horizontal"""
"0","    )+scale_y_continuous(limits = c(0, 2)) + "
"0","      theme(axis.text.x = element_text(angle = 30, hjust = 1, size = 12, face = ""bold"")) + "
"0","      scale_x_discrete(labels = label_names)"
"0","      "
"0","  "
"0","  png(paste0('Results/09.Sens.CV5.Associations/06_Linear_binary_Model2', "
"0","             '_fold.', fold.num, '.png'), width = 3000, height = 1200, res = 300)"
"0","  print(p)"
"0","  dev.off()"
"0","  "
"0","  ## Output Association Coefficients"
"0","  output.dt = combined_dt |>"
"0","    mutate(`Conf (95%CI)` = sprintf(""%.2f (%.2f, %.2f)"", OR, Lower, Upper),"
"0","             Pvalue = sprintf(""%.3f"", P_value)) |>"
"0","    dplyr::select(algorithm, outcome, `Conf (95%CI)`, Pvalue) |>"
"0","    pivot_wider(names_from = algorithm, values_from = c(`Conf (95%CI)`, Pvalue))"
"0","  writexl::write_xlsx(output.dt, "
"0","                      paste0('Results/09.Sens.CV5.Associations/06_Linear_binary_Model2_Nonscale(',"
"0","                             fold.num,"
"0","                             ').xlsx'))"
"0","}"
