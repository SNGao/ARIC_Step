"0","dt.all.nonscale = dt.all"
"0","## Per 1000 steps"
"0","num.tmp = which(colnames(dt.all.nonscale) %in% step_algorithms)"
"0","dt.all.nonscale[, num.tmp] = dt.all.nonscale[, num.tmp]/1000"
"0","num.tmp = which(colnames(dt.all.nonscale) %in% out.list.continuous)"
"0","dt.all.nonscale[, num.tmp] = scale(dt.all.nonscale[,num.tmp]) # Z-transform Outcome variables"
"0",""
"0","continuous_M1_list <- list()"
"0","continuous_M2_list <- list()"
"0","continuous.M1.result = list()"
"0","continuous.M2.result = list()"
"0",""
"0","for (out in out.list.continuous){"
"0","  column_names = c('Estimate', 'SE', 'T_value', 'P_value', 'Lower', 'Upper')"
"0","  matrix = matrix(NA * length(step_algorithms)*length(column_names), "
"0","                  nrow = length(step_algorithms), "
"0","                  ncol = length(column_names))"
"0","  df.M1 <- data.frame(matrix)"
"0","  colnames(df.M1) <- column_names"
"0","  rownames(df.M1) <- step_algorithms"
"0","  "
"0","  df.M2 <- df.M1"
"0","  "
"0","  for (step_var in step_algorithms){"
"0","    comb = paste0(c(out, '&', step_var), collapse = '')"
"0","    ## Model 1"
"0","    formula.M1 = as.formula(paste0(out,'~',step_var,'+',"
"0","                                    paste0(c(cov_all[c(cov_demo)]), # cov_life_gen"
"0","                                         collapse = '+')))"
"0","    continuous_M1_list[[comb]] = lm(formula.M1, dt.all.nonscale)"
"0","    result.tmp.M1 = data.frame(summary(continuous_M1_list[[comb]])$coefficients)"
"0","    result.tmp.M1$Lower = confint(continuous_M1_list[[comb]])[,1]"
"0","    result.tmp.M1$Upper = confint(continuous_M1_list[[comb]])[,2]"
"0","    df.M1[step_var,] = result.tmp.M1[2,]"
"0","    "
"0","    ## Model 2"
"0","    formula.M2 = as.formula(paste0(out,'~',step_var,'+',"
"0","                                    paste0(c(cov_all[c(cov_demo, cov_life_gen)]),"
"0","                                         collapse = '+')))"
"0","    continuous_M2_list[[comb]] = lm(formula.M2, dt.all.nonscale)"
"0","    result.tmp.M2 = data.frame(summary(continuous_M2_list[[comb]])$coefficients)"
"0","    result.tmp.M2$Lower = confint(continuous_M2_list[[comb]])[,1]"
"0","    result.tmp.M2$Upper = confint(continuous_M2_list[[comb]])[,2]"
"0","    df.M2[step_var,] = result.tmp.M2[2,]"
"0","  }"
"0","  continuous.M1.result[[out]] = df.M1"
"0","  continuous.M2.result[[out]] = df.M2"
"0","}"
