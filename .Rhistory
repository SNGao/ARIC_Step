Pvalue = sprintf("%.3f", P_value)) |>
dplyr::select(algorithm, outcome, `Conf (95%CI)`, Pvalue) |>
pivot_wider(names_from = algorithm, values_from = c(`Conf (95%CI)`, Pvalue)) |>
dplyr::select(outcome,
`Conf (95%CI)_ADEPT`, Pvalue_ADEPT,
`Conf (95%CI)_Oak`, Pvalue_Oak,
`Conf (95%CI)_SDT`, Pvalue_SDT,
`Conf (95%CI)_Stepcount`, Pvalue_Stepcount,
`Conf (95%CI)_Verisense`, Pvalue_Verisense)
output.dt$outcome = mod_name(output.dt$outcome)
writexl::write_xlsx(output.dt, 'Results/06_LR.M2.NonScale.Coef.xlsx')
out.list.binary = c('Hypertension', 'Diabetes','HF', 'MI', 'FALL')
dt.all.nonscale$FALL = as.factor(dt.all.nonscale$FALL)
num.tmp = which(colnames(dt.all.nonscale) %in% out.list.binary)
binary_M1_list <- list()
binary_M2_list <- list()
binary.M1.result = list()
binary.M2.result = list()
for (out in out.list.binary){
column_names = c('OR', 'SE', 'T_value', 'P_value', 'Lower', 'Upper')
matrix = matrix(NA * length(step_algorithms)*length(column_names),
nrow = length(step_algorithms),
ncol = length(column_names))
df.M1 <- data.frame(matrix)
colnames(df.M1) <- column_names
rownames(df.M1) <- step_algorithms
df.M2 <- df.M1
for (step_var in step_algorithms){
comb = paste0(c(out, '&', step_var), collapse = '')
## Model 1
formula.M1 = as.formula(paste0(out,'~',step_var,'+',
paste0(c(cov_all[c(cov_demo)]), # cov_life_gen
collapse = '+')))
binary_M1_list[[comb]] = glm(formula.M1, dt.all.nonscale, family = binomial)
result.tmp.M1 = data.frame(summary(binary_M1_list[[comb]])$coefficients)
result.tmp.M1$Lower = confint(binary_M1_list[[comb]])[,1]
result.tmp.M1$Upper = confint(binary_M1_list[[comb]])[,2]
result.tmp.M1$Estimate = exp(result.tmp.M1$Estimate)
result.tmp.M1$Lower = exp(result.tmp.M1$Lower)
result.tmp.M1$Upper = exp(result.tmp.M1$Upper)
df.M1[step_var,] = result.tmp.M1[2,]
## Model 2
formula.M2 = as.formula(paste0(out,'~',step_var,'+',
paste0(c(cov_all[c(cov_demo, cov_life_gen)]),
collapse = '+')))
binary_M2_list[[comb]] = glm(formula.M2, dt.all.nonscale, family = binomial)
result.tmp.M2 = data.frame(summary(binary_M2_list[[comb]])$coefficients)
result.tmp.M2$Lower = confint(binary_M2_list[[comb]])[,1]
result.tmp.M2$Upper = confint(binary_M2_list[[comb]])[,2]
result.tmp.M2$Estimate = exp(result.tmp.M2$Estimate)
result.tmp.M2$Lower = exp(result.tmp.M2$Lower)
result.tmp.M2$Upper = exp(result.tmp.M2$Upper)
df.M2[step_var,] = result.tmp.M2[2,]
}
binary.M1.result[[out]] = df.M1
binary.M2.result[[out]] = df.M2
}
library(forestploter)
library(grid)
library(ggpubr)
library(ggplotify)
forest.function.binary <- function(combined_dt, legend = TRUE){
combined_dt$outcome = mod_name(combined_dt$outcome)
dat.forest = combined_dt |>
dplyr::select(outcome, algorithm, OR, P_value, Lower, Upper) |>
dplyr::mutate(outcome = paste0(' ', outcome))
dat.forest <- dat.forest %>%
pivot_wider(
names_from = algorithm,
values_from = c(OR, P_value, Lower, Upper))
dat.forest$plot <- paste(rep(" ", 25), collapse = " ")
dat.forest$ci1 <- paste(sprintf("%.2f (%.2f, %.2f)", dat.forest$OR_ADEPT,
dat.forest$Lower_ADEPT, dat.forest$Upper_ADEPT),
sprintf("%.2f (%.2f, %.2f)", dat.forest$OR_Oak,
dat.forest$Lower_Oak, dat.forest$Upper_Oak),
sprintf("%.2f (%.2f, %.2f)", dat.forest$OR_SDT,
dat.forest$Lower_SDT, dat.forest$Upper_SDT),
sprintf("%.2f (%.2f, %.2f)", dat.forest$OR_Stepcount,
dat.forest$Lower_Stepcount, dat.forest$Upper_Stepcount),
sprintf("%.2f (%.2f, %.2f)", dat.forest$OR_Verisense,
dat.forest$Lower_Verisense, dat.forest$Upper_Verisense),
sep = "\n")
# dat.forest = dat.forest |>
#   mutate(`Coef (95%CI)` = sprintf("%.2f (%.2f, %.2f)", Estimate, Lower, Upper))
## Drawing
tm <- forest_theme(base_size = 7,
refline_lty = "solid",
ci_lwd = 1.2,
ci_pch = c(15, 15, 15, 15, 15),
ci_col = c("#3D72BE", "#E74C3C","#97470C","#4CAF50", "#FFC107"),
footnote_col = "blue",
# footnote_cex = 1, # reference line width
legend_name = " ", #"Step Algorithm",
legend_value = case_when(legend == TRUE ~ step_algorithms,
legend == FALSE ~ rep("", 5)),
vertline_lty = c("dashed", "dotted"),
vertline_col = c("#d6604d", "#bababa"),
# Table cell padding, width 4 and heights 3
core = list(padding = unit(c(2, 0.5), "mm")
))
# modify Column Name
colnames(dat.forest)[which(colnames(dat.forest) == 'outcome')] = 'Outcome'
colnames(dat.forest)[which(colnames(dat.forest) == 'plot')] = ' '
colnames(dat.forest)[which(colnames(dat.forest) == 'ci1')] = 'Coef (95%CI)'
p <- forest(dat.forest[,c(1, 22, 23)],
est = list(dat.forest$OR_ADEPT,
dat.forest$OR_Oak,
dat.forest$OR_SDT,
dat.forest$OR_Stepcount,
dat.forest$OR_Verisense
),
lower = list(dat.forest$Lower_ADEPT,
dat.forest$Lower_Oak,
dat.forest$Lower_SDT,
dat.forest$Lower_Stepcount,
dat.forest$Lower_Verisense
),
upper = list(dat.forest$Upper_ADEPT,
dat.forest$Upper_Oak,
dat.forest$Upper_SDT,
dat.forest$Upper_Stepcount,
dat.forest$Upper_Verisense),
ci_column = c(2),
sizes = 0.4,
ref_line = 1,
# vert_line = c(0.5, 2),
nudge_y = 0.15,
xlim = c(0.2, 1.3),
ticks_at = c(0.2, 1, 1.2),
theme = tm) |>
edit_plot(row = c(1:5),
col = 1,
gp = gpar(fontface = "bold", fontsize = 7)) |>
edit_plot(row = c(1:5),
col = 3,
gp = gpar(fontsize = 6)) |>
add_border(part = "header", where = c("bottom")) |>
add_border(part = "header", where = c("top"))
return(p)
}
combined_dt.M1 <- do.call(rbind, binary.M1.result)
combined_dt.M1$Label = row.names(combined_dt.M1)
combined_dt.M1 = combined_dt.M1 %>%
separate(Label, into = c("outcome", "algorithm"), sep = "\\.", remove = FALSE)
p1 = forest.function.binary(combined_dt = combined_dt.M1[1:25,])
png('Results/06_Association_results/06_Log.M1.Nonscale.png', height = 4, width = 7.2, units = 'in', res = 600)
print(p1)
dev.off()
combined_dt.M2 <- do.call(rbind, binary.M2.result)
combined_dt.M2$Label = row.names(combined_dt.M2)
combined_dt.M2 = combined_dt.M2 %>%
separate(Label, into = c("outcome", "algorithm"), sep = "\\.", remove = FALSE)
p1 = forest.function.binary(combined_dt = combined_dt.M2[1:25,])
png('Results/06_Association_results/06_Log.M2.Nonscale.png', height = 4, width = 7.2, units = 'in', res = 600)
print(p1)
dev.off()
## Output Association Coefficients
## M1
output.dt = combined_dt.M1 |>
mutate(`Conf (95%CI)` = sprintf("%.2f (%.2f, %.2f)", OR, Lower, Upper),
Pvalue = sprintf("%.3f", P_value)) |>
dplyr::select(algorithm, outcome, `Conf (95%CI)`, Pvalue) |>
pivot_wider(names_from = algorithm, values_from = c(`Conf (95%CI)`, Pvalue)) |>
dplyr::select(outcome,
`Conf (95%CI)_ADEPT`, Pvalue_ADEPT,
`Conf (95%CI)_Oak`, Pvalue_Oak,
`Conf (95%CI)_SDT`, Pvalue_SDT,
`Conf (95%CI)_Stepcount`, Pvalue_Stepcount,
`Conf (95%CI)_Verisense`, Pvalue_Verisense)
output.dt$outcome = mod_name(output.dt$outcome)
writexl::write_xlsx(output.dt, 'Results/06_Log.M1.NonScale.Coef.xlsx')
## M2
output.dt = combined_dt.M2 |>
mutate(`Conf (95%CI)` = sprintf("%.2f (%.2f, %.2f)", OR, Lower, Upper),
Pvalue = sprintf("%.3f", P_value)) |>
dplyr::select(algorithm, outcome, `Conf (95%CI)`, Pvalue) |>
pivot_wider(names_from = algorithm, values_from = c(`Conf (95%CI)`, Pvalue)) |>
dplyr::select(outcome,
`Conf (95%CI)_ADEPT`, Pvalue_ADEPT,
`Conf (95%CI)_Oak`, Pvalue_Oak,
`Conf (95%CI)_SDT`, Pvalue_SDT,
`Conf (95%CI)_Stepcount`, Pvalue_Stepcount,
`Conf (95%CI)_Verisense`, Pvalue_Verisense)
output.dt$outcome = mod_name(output.dt$outcome)
writexl::write_xlsx(output.dt, 'Results/06_Log.M2.NonScale.Coef.xlsx')
## Generate Table1 Summary
library(gtsummary)
library(flextable)
library(dplyr)
dt.all = read_csv('00_Intermediate_output/03_Step_Cov_Out.csv')
dt.all$Hypertension = ifelse(dt.all$Hypertension == 'Yes', 1,0)
dt.all$Diabetes = ifelse(dt.all$Diabetes == 'Yes', 1,0)
dat_cov = dt.all
dat_cov_p1 <- dat_cov %>%
mutate(Age_Group = case_when(
exam_age <= quantile(dat_cov$exam_age)[2] ~ 'Q1',
exam_age <= quantile(dat_cov$exam_age)[3] ~ 'Q2',
exam_age <= quantile(dat_cov$exam_age)[4] ~ 'Q3',
exam_age >= quantile(dat_cov$exam_age)[4] ~ 'Q4',
))
dat_cov_p1 %>%
select(exam_age, Sex, Race, Center, Education,
Smoking, Drinking, APOE, SPPB, ADEPT,
Oak, SDT, Stepcount, Verisense,
Age_Group) %>%
tbl_summary(by = "Age_Group",
statistic = all_continuous() ~ "{mean}({sd})") %>%
add_overall() %>%
add_p(test = list(all_continuous() ~ "aov",
all_categorical() ~ "chisq.test")) %>%
as_flex_table() %>%
save_as_docx(path = "Results/Table1_groupBy_Age.docx")
dat_cov = dt.all
dat_cov_p2 <- dat_cov %>%
mutate(ADEPT_Group = case_when(
ADEPT <= quantile(dat_cov$ADEPT)[2] ~ 'Q1',
ADEPT <= quantile(dat_cov$ADEPT)[3] ~ 'Q2',
ADEPT <= quantile(dat_cov$ADEPT)[4] ~ 'Q3',
ADEPT >= quantile(dat_cov$ADEPT)[4] ~ 'Q4',
))
## Generate Table1 Summary
library(gtsummary)
library(flextable)
dat_cov_p2 %>%
select(exam_age, Sex, Race, Center, Education,
Smoking, Drinking, APOE, SPPB, ADEPT,
Oak, SDT, Stepcount, Verisense,
ADEPT_Group) %>%
tbl_summary(by = "ADEPT_Group",
statistic = all_continuous() ~ "{mean}({sd})") %>%
add_overall() %>%
add_p(test = list(all_continuous() ~ "aov",
all_categorical() ~ "chisq.test")) %>%
as_flex_table() %>%
save_as_docx(path = "Results/Table1_groupBy_ADEPT.docx")
formatted_table$Anova = NULL
library(readr)
library(haven)
library(dplyr)
library(ggplot2)
library(DataExplorer)
library(patchwork)
source('DataInput_Distribution_Association.R')
custom_theme <- theme(
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
axis.line = element_line(size = 0.5),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
step_algorithms = c('ADEPT', 'Oak', 'SDT', 'Stepcount', 'Verisense')
dt.all = read_csv('00_Intermediate_output/03_Step_Cov_Out.csv')
# Stratify by sex and race, and normalize within each stratum
for(method in step_algorithms) {
dt.all <- dt.all %>%
group_by(Sex, Race) %>%
mutate(!!paste0(method, "") := scale(!!sym(method))) %>%
ungroup()
}
dat_cov = read_csv('00_Intermediate_output/03_Step_Cov_Out.csv')
results <- dat_cov %>%
group_by(Sex, Race) %>%
summarise(across(all_of(step_algorithms),
list(mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE)))) %>%
ungroup()
results_long <- results %>%
pivot_longer(cols = -c(Sex, Race),
names_to = c("method", ".value"),
names_pattern = "(.+)_(.+)")
formatted_table <- results_long %>%
mutate(value = sprintf("%.2f ± %.2f", mean, sd)) %>%
select(-mean, -sd) %>%
pivot_wider(names_from = c(Sex, Race), values_from = value)
formatted_table$Anova = NULL
for(method in step_algorithms) {
cat("\nANOVA for", method, ":\n")
model <- aov(as.formula(paste(method, "~ Sex * Race")), data = dat_cov)
print(summary(model)); tmp = summary(model)
formatted_table[formatted_table$method == method, 'Anova'] = round(tmp[[1]][3,5],3)
}
formatted_table$method = c('ADEPT', 'OAK', 'SDT', 'Stepcount', 'Verisence')
formatted_table
model
summary(model)
library(readr)
library(haven)
library(dplyr)
library(ggplot2)
library(DataExplorer)
library(patchwork)
library(robustbase) # for Adaptive Trimmed Mean Estimator
source('01_Functions_Base.R')
source('DataInput_Distribution_Association.R')
custom_theme <- theme(
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
axis.line = element_line(size = 0.5),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
custom_theme2 <- theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 1)
)
step_algorithms = c('ADEPT', 'Oak', 'SDT', 'Stepcount', 'Verisense')
dat_vis = read_csv('00_Intermediate_output/09_Step_Cov_WithoutSmokingImpute.csv')
dat_vis$...1 = NULL
dat_vis = dat_vis |> filter(!is.na(Smoking))
result = dat_vis
ex.list = c()
for (var in step_algorithms){
adjbox_result <- adjbox(result[[var]], id.n = Inf, plot = TRUE)
list.temp = which(result[[var]]  %in%  adjbox_result$out)
ex.list = c(ex.list, list.temp)
}
ex.list = result$subjectid[ex.list]
result.noextreme = result[result$subjectid %in% setdiff(result$subjectid, # N=1215
unique(ex.list)),] # N=37 Excluded
cat('The number of individuals who are excluded due to extreme values: ',
dim(result)[1] - dim(result.noextreme)[1])
dat.step = result.noextreme[,c(1,3:7)]
step.distribution.subtitle(dat.step, '09.Sens.ExcludeSmoking_Association')
step.distribution(dat.step, '09.Sens.ExcludeSmoking_Association')
dat_cov = result.noextreme
## Diabetes, CES.D, cogstatus
# dat_cov_V9 = dat_vis = read_csv('00_Intermediate_output/09_Step_Cov_WithoutSmokingImpute.csv') |>
#   dplyr::select(-`...1`) |>
#   dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid))
# num = which(colnames(dat_cov_V9) %in% c('cogstatus'))
# dat_cov = merge(dat_cov, dat_cov_V9[,c(1,num)], 'subjectid')
dat_bio = read_dta('WIT_STEP/Met_Outcome.dta') |>
dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid))
dat_bio = dat_bio[dat_bio$visit == 'V9',c(1,3,5,7,9)]
## TG, TC, HDL-C, LDL-C
dat_cov = merge(dat_cov, dat_bio, by = 'subjectid', all.x = TRUE)
## FAT(%), FAT MASS(Kg)
dat_FAT = read_dta('WIT_STEP/FAT_Outcome.dta') |>
dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid))
dat_cov = merge(dat_cov, dat_FAT, by = 'subjectid', all.x = TRUE)
dat_CVD = read_dta('/Users/gsn/Library/CloudStorage/OneDrive-JohnsHopkins/【JHU】Aging-RA/[ENGAGE]Cog_PA/EBA_Cog_PA/Derived_Data/CVD_all.dta') |>
dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid))
temp = merge(dat_cov, dat_CVD, 'subjectid', all.x = TRUE)
## Generate HF records
list_HF = temp |>
mutate(time_label = HF_date <= exam_dat,
HF_label = ifelse(HF == 1 & time_label, 1,0),
HF = HF_label) |>
select(-HF_label, -time_label, -HF_date)
list_HF$HF = ifelse(is.na(list_HF$HF), 0,list_HF$HF)
## Generate MI records
list_MI = temp |>
mutate(time_label = MI_date <= exam_dat,
MI_label = ifelse(MI == 1 & time_label, 1,0),
MI = MI_label) |>
select(-MI_label, -time_label, -MI_date) # The list of individuals who have HF before V5.
list_MI$MI = ifelse(is.na(list_MI$MI), 0,list_MI$MI)
## Generate Stroke records
list_stroke = temp |>
mutate(time_label = stroke_date <= exam_dat,
stroke_label = ifelse(stroke == 1 & time_label, 1,0),
stroke = stroke_label) |>
select(-stroke_label, -time_label, -stroke_date) # The list of individuals who have HF before V5.
list_stroke$stroke = ifelse(is.na(list_stroke$stroke), 0,list_stroke$stroke)
sum(!dat_cov$subjectid == list_HF$subjectid)
sum(!dat_cov$subjectid == list_MI$subjectid)
sum(!dat_cov$subjectid == list_stroke$subjectid)
dat_cov$HF = list_HF$HF
dat_cov$MI = list_MI$MI
dat_cov$Stroke = list_stroke$stroke
dat = read_dta('WIT_STEP/SBP_DBP_Outcome.dta') |>
dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid))
colnames(dat)[4:5] = c('Frailty_A', 'Frailty_B')
dat_cov = merge(dat_cov, dat, by = 'subjectid')
dat.pwv = read_dta('WIT_STEP/cf_pwv_Outcome.dta') |>
dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid)); colnames(dat.pwv)[2] = 'cfPWV'
dat_cov = merge(dat_cov, dat.pwv, by = 'subjectid', all.x = TRUE)
dat.fall = read_dta('WIT_STEP/FALL_Outcome.dta') |> select(-year) |>
dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid))
# table(dat.fall$FALL)
dat.fall = dat.fall |> mutate(FALL = case_when(FALL == 'A'~ 1,
FALL == 'B'~ 0,
FALL == 'C'~ NA))
dat.fall = dat.fall |>
group_by(subjectid) |>
summarise(FALL = sum(FALL))
dat_cov = merge(dat_cov, dat.fall, by = 'subjectid', all.x = TRUE)
dat.cog = read_dta('/Users/gsn/Library/CloudStorage/OneDrive-JohnsHopkins/【JHU】Aging-RA/[ENGAGE]Cog_PA/EBA_Cog_PA/Derived_Data/gen_Cog_all_derive.dta') |>
dplyr::mutate(subjectid = sub('[A-Z]', '', subjectid))
dat.cog = dat.cog[dat.cog$visit == 9,]
dat.cog <- dat.cog %>%
group_by(subjectid) %>%
filter(n() == 1 | vtype == "V9NCS") %>%  # Only samples with a unique subjectid or vtype of V9NCS are retained
ungroup()
dat_cov = merge(dat_cov, dat.cog, by = 'subjectid', all.x = TRUE)
write_csv(dat_cov, 'Results/09.Sens.ExcludeSmoking_Association/03_Step_Cov_Out.csv')
num = which(colnames(dat_cov) %in% step_algorithms)
dat_cov.per = dat_cov; dat_cov.per[, num] = dat_cov.per[, num]/1000
association.result(dat_cov.per, '09.Sens.ExcludeSmoking_Association/')
dat_cov.scale = dat_cov; dat_cov.scale[, num] = scale(dat_cov.scale[,num])
association.result(dat_cov.scale, '09.Sens.ExcludeSmoking_Association/scaled/')
View(dat_vis)
result.valid
folder.step = '$05_Combined.Steps.TAC.MVPA.LPA/'
file_list <- list.files(folder.step)
# Use lapply to read all files and combine them into a single DataFrame
combined_data <- do.call(rbind, lapply(file_list, function(file) {
read.csv(paste0(folder.step, file), stringsAsFactors = FALSE)
})); combined_data$X = NULL
valid.lists = combined_data |>
group_by(subjectid) |>
summarise(day.valid = sum(valid)) |>
filter(day.valid >= 3) |>
select(subjectid) # Num = 1304
result.valid = combined_data |> filter(subjectid %in% valid.lists$subjectid) |>
group_by(subjectid) |>
summarise(
ADEPT = mean(adept),
Oak = mean(oak),
SDT = mean(sdt),
Stepcount = mean(stepcount),
Verisense = mean(verisence),
MVPA = mean(MVPA),
TLAC = sum(log(TAC+1))/n(),
TAC = mean(TAC),
LTAC = log(TAC)
)
length(unique(result.valid$subjectid)) # Num = 1304
result.valid
result.valid$MVPA
## Use 1952 as MVPA threshold.
ggplot(result.valid, aes(x = MVPA)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of MVPA",
x = "MVPA",
y = "Frequency") +
theme_minimal()
png('MVPA.png', width = 4, height = 6, units = 'in', res = 300)
ggplot(result.valid, aes(x = MVPA)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of MVPA",
x = "MVPA",
y = "Frequency") +
theme_minimal()
png('MVPA.png', width = 4, height = 6, units = 'in', res = 300)
ggplot(result.valid, aes(x = MVPA)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of MVPA",
x = "MVPA",
y = "Frequency") +
custom_theme +
theme_minimal()
png('MVPA.png', width = 4, height = 6, units = 'in', res = 300)
ggplot(result.valid, aes(x = MVPA)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of MVPA",
x = "MVPA",
y = "Frequency") +
custom_theme +
theme_minimal()
dev.off()
## Use 1952 as MVPA threshold.
png('MVPA.png', width = 2, height = 3, units = 'in', res = 300)
ggplot(result.valid, aes(x = MVPA)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of MVPA",
x = "MVPA",
y = "Frequency") +
custom_theme +
theme_minimal()
dev.off()
custom_theme <- theme(
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"),
axis.line = element_line(size = 0.5),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
png('MVPA.png', width = 4, height = 6, units = 'in', res = 300)
ggplot(result.valid, aes(x = MVPA)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of MVPA",
x = "MVPA",
y = "Frequency") +
custom_theme +
theme_minimal()
dev.off()
custom_theme <- theme(
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"),
axis.line = element_line(size = 0.5),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
png('MVPA.png', width = 4, height = 6, units = 'in', res = 300)
ggplot(result.valid, aes(x = MVPA)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of MVPA",
x = "MVPA",
y = "Frequency") +
custom_theme +
theme_minimal()
median(result.valid$MVPA)
IQR(result.valid$MVPA)
quantile(result.valid$MVPA)
